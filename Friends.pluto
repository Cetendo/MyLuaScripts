util.keep_running()
util.require_natives(1681379138)
shadow = menu.shadow_root()
my_root = menu.my_root()

local previous_friend_count = 0
local previous_friend_names = {}



--------------------------------------------------------
function starts_with(str, prefix)
    return string.sub(str, 1, string.len(prefix)) == prefix
end
local function getPathToCmd(cmdRef) -- thx to aaronlink127 on disord for the function
    if not menu.is_ref_valid(cmdRef) then return "Not valid" end
    local tbllen = 0
    local tbl = {}
    repeat
        tbl[++tbllen] = lang.get_string(menu.get_menu_name(cmdRef))
        cmdRef = cmdRef:getParent()
    until not cmdRef:isValid()
    -- reverse table by swapping first and last, second and second last, etc
    for i=1, tbllen//2 do
        tbl[i], tbl[tbllen - i + 1] = tbl[tbllen - i + 1], tbl[i]
    end
    -- Remove the first element (menu version) from the table
    table.remove(tbl, 1)
    return table.concat(tbl, ">")
end
function fucus_to()
    fucus_path = getPathToCmd(menu.get_current_menu_list():getFocus())
    online_friends = getPathToCmd(menu.ref_by_rel_path(online_ref,"Friends ("..NETWORK.NETWORK_GET_FRIEND_COUNT()..")"))
    my_root_friends = getPathToCmd(menu.ref_by_rel_path(menu.my_root(),"Friends ("..NETWORK.NETWORK_GET_FRIEND_COUNT()..")"))
    if starts_with(fucus_path, online_friends) or starts_with(fucus_path, my_root_friends) then
        return fucus_path--getPathToCmd(menu.get_current_menu_list():getFocus())
    end
end

function gen_fren_funcs(name, i, friend_lists_ref, replace_ref)
    local status = " "--..(NETWORK.NETWORK_IS_FRIEND_INDEX_ONLINE(i) ? "[idk]" : "[Offline i guess]")
    local friend_player_function
    if replace_ref == nil then
        friend_player_function = menu.list(friend_lists_ref, name..status, {"friend "..name}, "", function(); end)
    else
        friend_player_function = menu.replace(replace_ref, menu.list(shadow, name..status, {"friend "..name}, "", function(); end))
    end
    --menu.on_focus(friend_player_function, function() util.toast("My Name is: "..name)end)
    menu.divider(friend_player_function, name..status)
    menu.action(friend_player_function, "Join", {"jf "..name}, "Join "..name, function()
        menu.trigger_commands("join "..name)
    end)
    menu.action(friend_player_function, "Spectate", {"sf "..name}, "Spectate "..name, function()
        menu.trigger_commands("namespectate "..name)
    end)
    menu.action(friend_player_function, "Invite", {"if "..name}, "Invite "..name, function()
        menu.trigger_commands("invite "..name)
    end)
    menu.action(friend_player_function, "Open profile", {"pf "..name}, "Open SC Profile from "..name, function()
        menu.trigger_commands("nameprofile "..name)
    end)
end

function build_friend_menu()
    online_ref = menu.ref_by_path("Online")
    local restore_to = fucus_to()
    local firstOfflineFriend, firstOnlineFriend
    --TODO get currnet focus and focus it in the end of the function
    if menu.ref_by_rel_path(online_ref,"Friends ("..previous_friend_count..")"):isValid() then
        menu.ref_by_rel_path(online_ref,"Friends ("..previous_friend_count..")" ):delete()
    end 
    if menu.ref_by_rel_path(my_root,"Friends ("..previous_friend_count..")"):isValid() then
        menu.ref_by_rel_path(my_root,"Friends ("..previous_friend_count..")"):delete()
    end 
    
    menu_parameter = "Friends ("..(NETWORK.NETWORK_GET_FRIEND_COUNT() ~= 250 ? NETWORK.NETWORK_GET_FRIEND_COUNT() : "Full")..")", {""}, "",function() util.log("on_click") end,function() util.log("on_back") end,function() util.log("on_active_list_update") end
    new_session_ref = menu.ref_by_rel_path(online_ref,"New Session")
    shadow_ref = menu.list(shadow, menu_parameter)
    s_friend_lists_ref = new_session_ref:attachBefore(shadow_ref)
    m_friend_lists_ref = menu.list(my_root, menu_parameter) 

    local friendCount = NETWORK.NETWORK_GET_FRIEND_COUNT()

    for i = 0, friendCount - 1 do
        local friendName = NETWORK.NETWORK_GET_FRIEND_NAME(i)
        local online = NETWORK.NETWORK_IS_FRIEND_ONLINE(friendName)
        if online and not firstOnlineFriend then
            firstOnlineFriend = friendName
            menu.divider(s_friend_lists_ref, 'Online')
            menu.divider(m_friend_lists_ref, 'Online')
        elseif not online and not firstOfflineFriend then
            firstOfflineFriend = friendName
            menu.divider(s_friend_lists_ref, 'Offline')
            menu.divider(m_friend_lists_ref, 'Offline')
        end
        gen_fren_funcs(friendName, i, s_friend_lists_ref)
        gen_fren_funcs(friendName, i, m_friend_lists_ref)
    end
    
    if restore_to ~= nil then
        menu.focus(menu.ref_by_path(restore_to))
    end
end
function update_friend_menu()
    online_ref = menu.ref_by_path("Online")
    local restore_to = fucus_to()
    s_friend_lists_ref = menu.ref_by_rel_path(online_ref,"Friends ("..NETWORK.NETWORK_GET_FRIEND_COUNT()..")")
    m_friend_lists_ref = menu.ref_by_rel_path(my_root,"Friends ("..NETWORK.NETWORK_GET_FRIEND_COUNT()..")")
    local current_friend = 0
    local firstOfflineFriend, firstOnlineFriend
    local s_children = s_friend_lists_ref:getChildren()
    local m_children = m_friend_lists_ref:getChildren()
    for i = 1, #s_children do
        local index = i
        local s_commandRef = s_children[index]
        local m_commandRef = m_children[index]
        -----
        local friendName = NETWORK.NETWORK_GET_FRIEND_NAME(current_friend)
        local online = NETWORK.NETWORK_IS_FRIEND_ONLINE(friendName)
        if online and not firstOnlineFriend then
            firstOnlineFriend = friendName
            menu.replace(s_commandRef, menu.divider(shadow, 'Online'))
            menu.replace(m_commandRef, menu.divider(shadow, 'Online'))
        elseif not online and not firstOfflineFriend then
            firstOfflineFriend = friendName
            menu.replace(s_commandRef, menu.divider(shadow, 'Offline'))
            menu.replace(m_commandRef, menu.divider(shadow, 'Offline'))
        else
            gen_fren_funcs(friendName, i, s_friend_lists_ref, s_commandRef)
            gen_fren_funcs(friendName, i, m_friend_lists_ref, m_commandRef)
            current_friend += 1
        end
    end
    if restore_to ~= nil then
        menu.focus(menu.ref_by_path(restore_to))
    end
end
--------------------------------------------------------


menu.action(my_root ,'Build', {''}, '', function(on_click)
    build_friend_menu()
end)
menu.action(my_root ,'Update', {''}, '', function(on_click)
    update_friend_menu()
end)

util.create_tick_handler(function()
    local friendCount = NETWORK.NETWORK_GET_FRIEND_COUNT()
    local current_friend_names = {}

    for i = 0, friendCount - 1 do
        local friendName = NETWORK.NETWORK_GET_FRIEND_NAME(i)
        table.insert(current_friend_names, friendName)
    end

    -- Check if friendCount has changed
    if friendCount ~= previous_friend_count then
        --util.toast("The number of friends has changed.")
        build_friend_menu()
        -- Update previous state
        previous_friend_count = friendCount
        previous_friend_names = current_friend_names
        return
    end

    -- Check if the order of friend names has changed
    for i, name in ipairs(current_friend_names) do
        if previous_friend_names[i] ~= name then
            --util.toast("The order of friends has changed.")
            update_friend_menu()
            previous_friend_names = current_friend_names
            break
        end
    end
end)

build_friend_menu()